1 	b 64 	Second Bitmap
2 	n ..19 	Primary account number (PAN)
3 	n 6 	Processing code
4 	n 12 	Amount, transaction
5 	n 12 	Amount, settlement
6 	n 12 	Amount, cardholder billing
7 	n 10 	Transmission date & time
8 	n 8 	Amount, cardholder billing fee
9 	n 8 	Conversion rate, settlement
10 	n 8 	Conversion rate, cardholder billing
11 	n 6 	System trace audit number (STAN)
12 	n 6 	Local transaction time (hhmmss)
13 	n 4 	Local transaction date (MMDD)
14 	n 4 	Expiration date
15 	n 4 	Settlement date
16 	n 4 	Currency conversion date
17 	n 4 	Capture date
18 	n 4 	Merchant type, or merchant category code
19 	n 3 	Acquiring institution (country code)
20 	n 3 	PAN extended (country code)
21 	n 3 	Forwarding institution (country code)
22 	n 3 	Point of service entry mode
23 	n 3 	Application PAN sequence number
24 	n 3 	Function code (ISO 8583:1993), or network international identifier (NII)
25 	n 2 	Point of service condition code
26 	n 2 	Point of service capture code
27 	n 1 	Authorizing identification response length
28 	x+n 8 	Amount, transaction fee
29 	x+n 8 	Amount, settlement fee
30 	x+n 8 	Amount, transaction processing fee
31 	x+n 8 	Amount, settlement processing fee
32 	n ..11 	Acquiring institution identification code
33 	n ..11 	Forwarding institution identification code
34 	ns ..28 	Primary account number, extended
35 	z ..37 	Track 2 data
36 	n ...104 	Track 3 data
37 	an 12 	Retrieval reference number
38 	an 6 	Authorization identification response
39 	an 2 	Response code
40 	an 3 	Service restriction code
41 	ans 8 	Card acceptor terminal identification
42 	ans 15 	Card acceptor identification code
43 	ans 40 	Card acceptor name/location (1–23 street address, –36 city, –38 state, 39–40 country)
44 	an ..25 	Additional response data
45 	an ..76 	Track 1 data
46 	an ...999 	Additional data (ISO)
47 	an ...999 	Additional data (national)
48 	an ...999 	Additional data (private)
49 	n 3 	Currency code, transaction
50 	n 3 	Currency code, settlement
51 	n 3 	Currency code, cardholder billing
52 	b 64 	Personal identification number data
53 	n 16 	Security related control information
54 	an ...120 	Additional amounts
55 	ans ...999 	ICC data – EMV having multiple tags
56 	ans ...999 	Reserved (ISO)
57 	ans ...999 	Reserved (national)
58 	ans ...999
59 	ans ...999
60 	ans ...999 	Reserved (national) (e.g. settlement request: batch number, advice transactions: original transaction amount, batch upload: original MTI plus original RRN plus original STAN, etc.)
61 	ans ...999 	Reserved (private) (e.g. CVV2/service code   transactions)
62 	ans ...999 	Reserved (private) (e.g. transactions: invoice number, key exchange transactions: TPK key, etc.)
63 	ans ...999 	Reserved (private)
64 	b 64 	Message authentication code (MAC)
65 	b 1 	Extended bitmap indicator
66 	n 1 	Settlement code
67 	n 2 	Extended payment code
68 	n 3 	Receiving institution country code
69 	n 3 	Settlement institution country code
70 	n 3 	Network management information code
71 	n 4 	Message number
72 	n 4 	Last message's number
73 	n 6 	Action date (YYMMDD)
74 	n 10 	Number of credits
75 	n 10 	Credits, reversal number
76 	n 10 	Number of debits
77 	n 10 	Debits, reversal number
78 	n 10 	Transfer number
79 	n 10 	Transfer, reversal number
80 	n 10 	Number of inquiries
81 	n 10 	Number of authorizations
82 	n 12 	Credits, processing fee amount
83 	n 12 	Credits, transaction fee amount
84 	n 12 	Debits, processing fee amount
85 	n 12 	Debits, transaction fee amount
86 	n 16 	Total amount of credits
87 	n 16 	Credits, reversal amount
88 	n 16 	Total amount of debits
89 	n 16 	Debits, reversal amount
90 	n 42 	Original data elements
91 	an 1 	File update code
92 	an 2 	File security code
93 	an 5 	Response indicator
94 	an 7 	Service indicator
95 	an 42 	Replacement amounts
96 	b 64 	Message security code
97 	x+n 16 	Net settlement amount
98 	ans 25 	Payee
99 	n ..11 	Settlement institution identification code
100 	n ..11 	Receiving institution identification code
101 	ans ..17 	File name
102 	ans ..28 	Account identification 1
103 	ans ..28 	Account identification 2
104 	ans ...100 	Transaction description
105 	ans ...999 	Reserved for ISO use
106 	ans ...999
107 	ans ...999
108 	ans ...999
109 	ans ...999
110 	ans ...999
111 	ans ...999
112 	ans ...999 	Reserved for national use
113 	ans ...999
114 	ans ...999
115 	ans ...999
116 	ans ...999
117 	ans ...999
118 	ans ...999
119 	ans ...999
120 	ans ...999 	Reserved for private use
121 	ans ...999
122 	ans ...999
123 	ans ...999
124 	ans ...999
125 	ans ...999
126 	ans ...999
127 	ans ...999
128 	b 64 	Message authentication code

//Code To Generate All Fields from Above format!

        [Fact]
        public void WriteAllSpecsOfIsoToJson()
        {
            var allSpecsLines = System.IO.File.ReadAllLines("./Messages/JsonFiles/AllIsoFields.txt");

            var allFieldSpecs = new List<IsoField>();

            var i = 1;
            foreach(var specLine in allSpecsLines)
            {
                var splittedLine = specLine.Split("\t");
                var lenTypesSplitted = splittedLine[1].Split(' ');

                allFieldSpecs.Add(new IsoField
                {
                    Position = (IsoFields)i,
                    MaxLen = int.Parse(lenTypesSplitted[1].Trim().Contains('.') ? lenTypesSplitted[1].TrimStart('.') : lenTypesSplitted[1].Trim()),
                    Encoding = EncodingType.None,
                    LengthType = GetLenType(lenTypesSplitted[1].Trim()),
                    DataType = DataType.ASCII,
                    ContentType = GetContentType(lenTypesSplitted[0].Trim())
                });

                i++;
            }

            var isoMessage = new IsoMessage { Name = "Iso Default Fields", IsoFieldsCollection = allFieldSpecs };
            var settings = new Newtonsoft.Json.JsonSerializerSettings
            {
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                Formatting = Newtonsoft.Json.Formatting.Indented,
                Converters = new List<Newtonsoft.Json.JsonConverter> { new Newtonsoft.Json.Converters.StringEnumConverter() }
            };

            System.IO.File.WriteAllText("./DefaultIsoMessage.json", Newtonsoft.Json.JsonConvert.SerializeObject(isoMessage, settings));
        }

        private ContentType GetContentType(string v)
        {
            switch (v)
            {
                case "n":
                    return ContentType.N;
                case "an":
                    return ContentType.AN;
                case "ans":
                    return ContentType.ANS;
                case "z":
                    return ContentType.Z;
                case "b":
                    return ContentType.B;
                case "a":
                    return ContentType.A;
                default:
                    return ContentType.AN;
            }
        }

        private LengthType GetLenType(string lenType)
        {
            var numOfTeleies = lenType.Count(p => p == '.');
            return (LengthType)numOfTeleies;
        }
